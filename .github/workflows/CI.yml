name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        runner-os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.runner-os }}

    steps:
    - uses: actions/checkout@v2

    - name: Initialize CodeQL
      if: matrix.runner-os == 'ubuntu-latest'
      uses: github/codeql-action/init@v1
      with:
        languages: 'csharp'
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: dotnet format
      run: dotnet format src/OctoshiftCLI.sln --verify-no-changes

    - name: Restore dependencies
      run: dotnet restore src/OctoshiftCLI.sln

    - name: Build
      run: dotnet build src/OctoshiftCLI.sln --no-restore /p:TreatWarningsAsErrors=true

    - name: Unit Test
      run: dotnet test src/OctoshiftCLI.Tests/OctoshiftCLI.Tests.csproj --no-build --verbosity normal --logger:"junit;LogFilePath=unit-tests.xml" --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Copy Coverage To Predictable Location
      run: cp coverage/**/coverage.cobertura.xml coverage/coverage.cobertura.xml

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.1.0
      if: matrix.runner-os == 'ubuntu-latest'
      with:
        filename: coverage/coverage.cobertura.xml
        badge: true
        format: 'markdown'
        output: 'both'

    # This is used by the subsequent publish-test-results.yml
    - name: Upload Unit Test Results
      if: matrix.runner-os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: Unit Test Results
        path: src/OctoshiftCLI.Tests/unit-tests.xml

    # This is used by the subsequent publish-test-results.yml
    - name: Upload Code Coverage Report
      if: matrix.runner-os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: Code Coverage Report
        path: code-coverage-results.md
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      if: matrix.runner-os == 'ubuntu-latest'

  upload-event-file:
    runs-on: ubuntu-latest
    steps:
    # This is used by the subsequent publish-test-results.yaml
    - name: Upload Event File
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}

  integration-test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.owner.login == 'github'
    strategy:
      matrix:
        runner-os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.runner-os }}
    concurrency: integration-test-${{ matrix.runner-os }}
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Build Artifacts
      if: matrix.runner-os == 'ubuntu-latest'
      run: ./publish.ps1
      shell: pwsh
      env:
        SKIP_WINDOWS: "true"
        SKIP_MACOS: "true"

    - name: Build Artifacts
      if: matrix.runner-os == 'windows-latest'
      run: ./publish.ps1
      shell: pwsh
      env:
        SKIP_LINUX: "true"
        SKIP_MACOS: "true"

    - name: Build Artifacts
      if: matrix.runner-os == 'macos-latest'
      run: ./publish.ps1
      shell: pwsh
      env:
        SKIP_WINDOWS: "true"
        SKIP_LINUX: "true"

    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      if: matrix.runner-os == 'ubuntu-latest'
      with:
        name: publish-binaries
        path: |
          dist/
          !dist/*.tar.gz
          !dist/*.zip

    - name: Copy binary to root (linux)
      if: matrix.runner-os == 'ubuntu-latest'
      run: Copy-Item ./dist/linux-x64/gei-linux-amd64 ./gh-gei
      shell: pwsh

    - name: Copy binary to root (windows)
      if: matrix.runner-os == 'windows-latest'
      run: Copy-Item ./dist/win-x64/gei-windows-amd64.exe ./gh-gei.exe
      shell: pwsh

    - name: Copy binary to root (macos)
      if: matrix.runner-os == 'macos-latest'
      run: Copy-Item ./dist/osx-x64/gei-darwin-amd64 ./gh-gei
      shell: pwsh

    - name: Install GH extension
      run: gh extension install .
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Integration Test
      env: 
        ADO_PAT: ${{ secrets.ADO_PAT }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: dotnet test src/OctoshiftCLI.IntegrationTests/OctoshiftCLI.IntegrationTests.csproj --logger:"junit;LogFilePath=integration-tests.xml"

    # This is used by the subsequent publish-test-results.yml
    - name: Upload Integration Test Results
      if: matrix.runner-os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: Integration Test Results
        path: src/OctoshiftCLI.IntegrationTests/integration-tests.xml
    
    - name: Upload test logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: integration-test-logs-${{ matrix.runner-os }}
        path: dist/**/*.log

    - name: Test Logs
      if: always()
      run: Get-ChildItem . -Filter *.octoshift.log -Recurse | ForEach-Object { Get-Content -Path $_.FullName }
      working-directory: ./dist
      shell: pwsh

    - name: Test Logs (Verbose)
      if: always()
      run: Get-ChildItem . -Filter *.octoshift.verbose.log -Recurse | ForEach-Object { Get-Content -Path $_.FullName }
      working-directory: ./dist
      shell: pwsh

  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build ]
    environment: PUBLISH_RELEASE

    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.RELEASE_NOTES_PAT }}
        fetch-depth: 0

    - name: Validate tag on main
      shell: pwsh
      run: |
        git checkout main
        $mainsha = $(git show-ref refs/heads/main --hash)
        $tagsha = $(git show-ref ${{ github.ref }} --hash)

        Write-Output "refs/heads/main: $mainsha"
        Write-Output "${{ github.ref }}: $tagsha"

        if ($mainsha -ne $tagsha) {
          Write-Error "tag must match HEAD of main"
          exit 1
        }

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Build Artifacts
      run: ./publish.ps1
      shell: pwsh
      env:
        CLI_VERSION: ${{ github.ref }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: ./RELEASENOTES.md
        files: |
          ./dist/ado2gh.*.win-x64.zip
          ./dist/ado2gh.*.linux-x64.tar.gz
          ./dist/ado2gh.*.osx-x64.tar.gz
          ./dist/win-x64/gei-windows-amd64.exe
          ./dist/linux-x64/gei-linux-amd64
          ./dist/osx-x64/gei-darwin-amd64

    - name: Archive Release Notes
      shell: pwsh
      run: |
        $TAG_NAME = "${{ github.ref }}".Substring(10)
        Get-Content ./RELEASENOTES.md | Out-File -FilePath ./releasenotes/$TAG_NAME.md
        "" | Out-File ./RELEASENOTES.md
        
    - name: Commit Archived Release Notes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Automated commit of archived release notes [skip ci]
        file_pattern: RELEASENOTES.md releasenotes/*.md
        branch: main